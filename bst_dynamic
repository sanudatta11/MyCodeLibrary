#include<bits/stdc++.h>
using namespace std;
struct node{
    int data;
    node *right;
    node *left;
};

void insert_bst(node *root,int data)
{
    if(data < root->data)
    {
        if(!root->left)
        {
            node *ptr = new node;
            ptr->data = data;
            ptr->left = ptr->right = NULL;
            root->left = ptr;
        }
        else
            insert_bst(root->left,data);
    }
    else if(data > root->data){
                if(!root->right)
                {
                    node *ptr = new node;
                    ptr->data = data;
                    ptr->right = ptr->left = NULL;
                    root->right = ptr;
                }
                else
                    insert_bst(root->right,data);
            }
}

bool find_bst(node *root,int data)
{
    if(!root)
        return false;
    if(root->data == data)
        return true;
    if(data<root->data)
        find_bst(root->left,data);
    else
        find_bst(root->right,data);
}

void delete_bst(node *root)
{
    if(!root->left&& !root->right)
        delete root;
    else
    {
        delete_bst(root->left);
        delete_bst(root->right);
    }
}

int main()
{
    cout<<"Enter number of nodes to make=";
    int n;
    cin>>n;
    node *root = new node;
    root->left=root->right = NULL;
    for(int i=0;i<n;++i)
    {
        int temp;
        cin>>temp;
        if(i==0)
            root->data = temp;
        else
            insert_bst(root,temp);
    }
    cout<<"\nEnter queries to make=";
    int qu;
    cin>>qu;
    for(int i=0;i<qu;++i)
    {
        cout<<"Enter digit to search=";
        int temp;
        cin>>temp;
        if(find_bst(root,temp))
            cout<<"Element Present\n";
        else
            cout<<"Element not present\n";
    }
    delete_bst(root);
    return 0;
}

